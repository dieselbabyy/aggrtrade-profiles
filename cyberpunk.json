{
  "version": 9,
  "createdAt": 1724702459146,
  "updatedAt": 1733130210229,
  "name": "dieselbaby-cyberpunk-theme",
  "id": "dieselbaby-cyberpunk-theme",
  "states": {
    "panes": {
      "_id": "panes",
      "locked": true,
      "layout": [
        {
          "i": "chart",
          "type": "chart",
          "x": 0,
          "y": 0,
          "w": 20,
          "h": 22,
          "moved": false
        },
        {
          "i": "stats",
          "type": "stats",
          "y": 10,
          "x": 20,
          "w": 4,
          "h": 2,
          "moved": false
        },
        {
          "i": "counters",
          "type": "counters",
          "y": 6,
          "x": 20,
          "w": 4,
          "h": 4,
          "moved": false
        },
        {
          "i": "stats copy 1",
          "type": "stats",
          "y": 0,
          "x": 20,
          "w": 4,
          "h": 2,
          "moved": false
        },
        {
          "i": "trades-lite",
          "type": "trades-lite",
          "x": 20,
          "y": 12,
          "w": 4,
          "h": 10,
          "moved": false
        },
        {
          "i": "trades",
          "type": "trades",
          "x": 20,
          "y": 2,
          "w": 4,
          "h": 3,
          "moved": false
        },
        {
          "i": "quikstats",
          "type": "stats",
          "x": 20,
          "y": 5,
          "w": 4,
          "h": 1,
          "moved": false
        },
        {
          "i": "website",
          "type": "website",
          "x": 0,
          "y": 22,
          "w": 24,
          "h": 2,
          "moved": false
        }
      ],
      "panes": {
        "chart": {
          "id": "chart",
          "name": "",
          "type": "chart",
          "markets": [
            "BINANCE_FUTURES:btcbusd",
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcbusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITMEX:XBT_USDT",
            "BITMEX:XBTUSD",
            "BITMEX:XBTUSDT",
            "BITSTAMP:btcusd",
            "BITSTAMP:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "DERIBIT:BTC_USDC-PERPETUAL",
            "DERIBIT:BTC-PERPETUAL",
            "KRAKEN:PI_XBTUSD",
            "KRAKEN:XBT/USD",
            "KRAKEN:XBT/USDC",
            "KRAKEN:XBT/USDT",
            "KUCOIN:BTC-USDC",
            "KUCOIN:BTC-USDT",
            "KUCOIN:XBTUSDM",
            "KUCOIN:XBTUSDTM",
            "MEXC:BTC_USD",
            "MEXC:BTC_USDT",
            "MEXC:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP"
          ],
          "zoom": 1.25
        },
        "stats": {
          "id": "stats",
          "name": "quikstats",
          "type": "stats",
          "zoom": 1.25,
          "markets": [
            "BINANCE_FUTURES:btcbusd",
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcbusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITMEX:XBT_USDT",
            "BITMEX:XBTUSD",
            "BITMEX:XBTUSDT",
            "BITSTAMP:btcusd",
            "BITSTAMP:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "DERIBIT:BTC_USDC-PERPETUAL",
            "DERIBIT:BTC-PERPETUAL",
            "KRAKEN:PI_XBTUSD",
            "KRAKEN:XBT/USD",
            "KRAKEN:XBT/USDC",
            "KRAKEN:XBT/USDT",
            "KUCOIN:BTC-USDC",
            "KUCOIN:BTC-USDT",
            "KUCOIN:XBTUSDM",
            "KUCOIN:XBTUSDTM",
            "MEXC:BTC_USD",
            "MEXC:BTC_USDT",
            "MEXC:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP"
          ]
        },
        "counters": {
          "id": "counters",
          "name": "running-count",
          "type": "counters",
          "zoom": 1.125,
          "markets": [
            "BINANCE_FUTURES:btcbusd",
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcbusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITMEX:XBT_USDT",
            "BITMEX:XBTUSD",
            "BITMEX:XBTUSDT",
            "BITSTAMP:btcusd",
            "BITSTAMP:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "DERIBIT:BTC_USDC-PERPETUAL",
            "DERIBIT:BTC-PERPETUAL",
            "KRAKEN:PI_XBTUSD",
            "KRAKEN:XBT/USD",
            "KRAKEN:XBT/USDC",
            "KRAKEN:XBT/USDT",
            "KUCOIN:BTC-USDC",
            "KUCOIN:BTC-USDT",
            "KUCOIN:XBTUSDM",
            "KUCOIN:XBTUSDTM",
            "MEXC:BTC_USD",
            "MEXC:BTC_USDT",
            "MEXC:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP"
          ]
        },
        "stats copy 1": {
          "id": "stats copy 1",
          "name": "bigvol",
          "type": "stats",
          "zoom": 2,
          "markets": [
            "BINANCE_FUTURES:btcbusd",
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcbusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITMEX:XBT_USDT",
            "BITMEX:XBTUSD",
            "BITMEX:XBTUSDT",
            "BITSTAMP:btcusd",
            "BITSTAMP:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "DERIBIT:BTC_USDC-PERPETUAL",
            "DERIBIT:BTC-PERPETUAL",
            "KRAKEN:PI_XBTUSD",
            "KRAKEN:XBT/USD",
            "KRAKEN:XBT/USDC",
            "KRAKEN:XBT/USDT",
            "KUCOIN:BTC-USDC",
            "KUCOIN:BTC-USDT",
            "KUCOIN:XBTUSDM",
            "KUCOIN:XBTUSDTM",
            "MEXC:BTC_USD",
            "MEXC:BTC_USDT",
            "MEXC:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP"
          ]
        },
        "trades-lite": {
          "id": "trades-lite",
          "name": "",
          "type": "trades-lite",
          "zoom": 1.25,
          "markets": [
            "BINANCE_FUTURES:btcbusd",
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcbusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITMEX:XBT_USDT",
            "BITMEX:XBTUSD",
            "BITMEX:XBTUSDT",
            "BITSTAMP:btcusd",
            "BITSTAMP:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "DERIBIT:BTC_USDC-PERPETUAL",
            "DERIBIT:BTC-PERPETUAL",
            "KRAKEN:PI_XBTUSD",
            "KRAKEN:XBT/USD",
            "KRAKEN:XBT/USDC",
            "KRAKEN:XBT/USDT",
            "KUCOIN:BTC-USDC",
            "KUCOIN:BTC-USDT",
            "KUCOIN:XBTUSDM",
            "KUCOIN:XBTUSDTM",
            "MEXC:BTC_USD",
            "MEXC:BTC_USDT",
            "MEXC:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP"
          ]
        },
        "trades": {
          "id": "trades",
          "name": "liquidations",
          "type": "trades",
          "zoom": 1.125,
          "markets": [
            "BINANCE_FUTURES:btcbusd",
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcbusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITMEX:XBT_USDT",
            "BITMEX:XBTUSD",
            "BITMEX:XBTUSDT",
            "BITSTAMP:btcusd",
            "BITSTAMP:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "DERIBIT:BTC_USDC-PERPETUAL",
            "DERIBIT:BTC-PERPETUAL",
            "KRAKEN:PI_XBTUSD",
            "KRAKEN:XBT/USD",
            "KRAKEN:XBT/USDC",
            "KRAKEN:XBT/USDT",
            "KUCOIN:BTC-USDC",
            "KUCOIN:BTC-USDT",
            "KUCOIN:XBTUSDM",
            "KUCOIN:XBTUSDTM",
            "MEXC:BTC_USD",
            "MEXC:BTC_USDT",
            "MEXC:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP"
          ]
        },
        "quikstats": {
          "id": "quikstats",
          "name": "quikstats",
          "type": "stats",
          "zoom": 1.25,
          "settings": {
            "granularity": 5000,
            "window": 60000,
            "enableChart": false,
            "buckets": {
              "trades": {
                "id": "trades",
                "name": "TRADES",
                "input": "cbuy + csell",
                "enabled": true,
                "color": "rgba(255, 255, 255, .25)",
                "precision": 2,
                "type": "line"
              },
              "vold": {
                "id": "vold",
                "name": "VOLUME Δ",
                "input": "vbuy - vsell",
                "enabled": false,
                "color": "#40d745",
                "type": "area"
              },
              "tradesd": {
                "id": "tradesd",
                "name": "TRADES Δ",
                "input": "cbuy - csell",
                "enabled": true,
                "color": "#2196f3",
                "precision": 2,
                "type": "line"
              },
              "1hliq": {
                "id": "1hliq",
                "name": "1H LIQUIDATIONS Δ",
                "window": 3600000,
                "input": "lbuy-lsell",
                "enabled": true,
                "color": "value>0?'#43a047':'#f44336'",
                "conditionnalColor": true,
                "type": "histogram"
              }
            }
          },
          "markets": [
            "BINANCE_FUTURES:btcbusd",
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcbusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITMEX:XBT_USDT",
            "BITMEX:XBTUSD",
            "BITMEX:XBTUSDT",
            "BITSTAMP:btcusd",
            "BITSTAMP:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "DERIBIT:BTC_USDC-PERPETUAL",
            "DERIBIT:BTC-PERPETUAL",
            "KRAKEN:PI_XBTUSD",
            "KRAKEN:XBT/USD",
            "KRAKEN:XBT/USDC",
            "KRAKEN:XBT/USDT",
            "KUCOIN:BTC-USDC",
            "KUCOIN:BTC-USDT",
            "KUCOIN:XBTUSDM",
            "KUCOIN:XBTUSDTM",
            "MEXC:BTC_USD",
            "MEXC:BTC_USDT",
            "MEXC:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP"
          ]
        },
        "website": {
          "id": "website",
          "name": "diesel.baby",
          "type": "website",
          "markets": []
        }
      },
      "syncedWithParentFrame": []
    },
    "chart": {
      "indicatorsErrors": {},
      "indicators": {
        "cvd": {
          "enabled": true,
          "name": "CVD",
          "description": "Cumulative Volume Delta",
          "script": "plotline(cum(vbuy - vsell))",
          "options": {
            "priceScaleId": "cvd",
            "priceFormat": {
              "type": "volume"
            },
            "color": "rgb(57,11,223)",
            "scaleMargins": {
              "top": 0.84,
              "bottom": 0
            },
            "lineWidth": 3
          },
          "id": "cvd",
          "createdAt": 1693242396260,
          "updatedAt": null,
          "series": [
            "cvd"
          ],
          "unsavedChanges": true,
          "optionsDefinitions": {}
        },
        "liquidations": {
          "enabled": true,
          "name": "Liquidations",
          "description": "Liquidations by side",
          "script": "plothistogram(lbuy, color=options.upColor)\nplothistogram(-lsell, color=options.downColor)",
          "options": {
            "priceFormat": {
              "type": "volume"
            },
            "priceScaleId": "volume_liquidations",
            "upColor": "rgb(8,1,108)",
            "downColor": "rgb(144,86,0)",
            "scaleMargins": {
              "top": 0.74,
              "bottom": 0.18
            }
          },
          "id": "liquidations",
          "createdAt": 1693242396260,
          "updatedAt": null,
          "series": [
            "liquidations",
            "6b98xyte"
          ],
          "unsavedChanges": true,
          "optionsDefinitions": {}
        },
        "price": {
          "enabled": true,
          "name": "Price",
          "script": "plotcandlestick(options.useHeikinAshi ? avg_heikinashi(bar) : options.useGaps ? avg_ohlc_with_gaps(bar) : avg_ohlc(bar))",
          "options": {
            "priceScaleId": "right",
            "priceFormat": {
              "auto": true,
              "precision": 2,
              "minMove": 0.01
            },
            "priceLineVisible": true,
            "lastValueVisible": true,
            "borderVisible": false,
            "upColor": "rgb(0,180,30)",
            "downColor": "rgb(193,8,8)",
            "borderUpColor": "rgb(59,202,109)",
            "borderDownColor": "rgb(239,67,82)",
            "wickUpColor": "rgb(6,238,29)",
            "wickDownColor": "rgb(157,2,2)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.03,
              "bottom": 0.27
            }
          },
          "id": "price",
          "createdAt": 1693242396260,
          "updatedAt": 1733124439423,
          "series": [
            "price"
          ],
          "unsavedChanges": false,
          "optionsDefinitions": {},
          "libraryId": "price"
        },
        "volume": {
          "enabled": true,
          "name": "Volume",
          "description": "Volume + delta",
          "script": "if (upColor === 0) {\n  if (options.showDelta) {\n    upColor = options.upBgColor\n    downColor = options.downBgColor\n  } else {\n    upColor = options.upColor\n    downColor = options.downColor\n  }\n}\n\nif (options.showDelta) {\n  plothistogram({ time: time, value: Math.abs(vbuy-vsell), color: vbuy - vsell > 0 ? options.upColor : options.downColor})\n}\n\nplothistogram({ time: time, value: vbuy + vsell, color: vbuy > vsell ? upColor : downColor })",
          "options": {
            "priceFormat": {
              "type": "volume"
            },
            "upColor": "rgb(0,157,55)",
            "downColor": "rgb(139,4,4)",
            "priceScaleId": "volume",
            "scaleMargins": {
              "top": 0.84,
              "bottom": 0
            },
            "showDelta": true,
            "upBgColor": "rgba(0,123,43,0.5)",
            "downBgColor": "rgba(108,1,1,0.5)"
          },
          "id": "volume",
          "createdAt": 1693242396260,
          "updatedAt": null,
          "series": [
            "volume",
            "e7ww2q29"
          ],
          "optionsDefinitions": {},
          "unsavedChanges": true
        },
        "_uic878tuv4zadepb": {
          "id": "_uic878tuv4zadepb",
          "libraryId": "liquidation-heatmap",
          "name": "Liquidation Heatmap",
          "script": "leverages = option(default=5|20|100,type=text)\nthreshold = option(default=5,type=range,min=0,max=200,log=true)\nfadeAmount = option(default=0.02,type=range,min=0,max=2,step=0.01)\nfadeStart = option(default=100,type=range,min=0,max=200,step=1)\nautoScale = option(default=0.39,type=range,min=0,max=2,step=0.01)\nautoScaleLength = option(default=200,type=range,min=1,max=200,step=1)\nautoRescale = option(default=0,type=range,min=0,max=1000,log=true)\nfixedScale = option(default=\"\",type=text,placeholder=\"empty = ATR\")\nstrength = option(default=0.25,type=range,min=0,max=10,step=0.001,log=true)\ndemultiplier = option(default=1,type=range,min=0,max=10,step=0.001,log=true)\nquote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\nexchange = option(default=null,type=exchange,rebuild=true)\ntype = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\ncolor0 = option(default=rgba(42,0,117,0),type=color)\ncolor1 = option(default=rgb(63,16,87),type=color)\ncolor2 = option(default=rgb(76,152,134),type=color)\ncolor3 = option(default=rgb(240,218,24),type=color)\nvolLength = option(default=1,type=range,min=1,max=200, step=1)\nuseHK = option(default=false,type=checkbox,description=\"Use heikinashi as source\")\nuseLog = option(default=false,type=checkbox)\nshowChanges = option(type=checkbox)\ndrawInfinite = option(default=true,type=checkbox,description=\"Draw beyond viewport\")\nuseLegacyLp  = option(default=true,type=checkbox)\nif (!liquidityAtPrices) {\n  // check if liquidityAtPrices isn't defined = initial run of the script\n\n  lastIndex = null\n  freeSlots = []\n  usedSlots = []\n  boundaries = {}\n  liquidityAtPrices = {}\n  indexOfPrices = {}\n  resistances = []\n  totalResistances = 0\n  supports = []\n  totalSupports = 0\n  pendingRedraws = []\n  var shortLeverage = options.leverages.toString().split(/[|,]/).map(a => +a)\n  var longLeverage = shortLeverage.map(a => -a)\n  resolvedLeverages = shortLeverage.concat(longLeverage)\n  steps = null\n  stepsIndex = null\n\n  for (var i = 0; i < series.length; i++) {\n    if (series[i].seriesType() !== 'BrokenArea') {\n      continue\n    }\n\n    // register each available series as a slot \n    freeSlots.push({\n    index: i,\n    redrawAt: 0\n    })\n\n    // boundaries: { [cellId: string]: *bar index* }\n    series[i].setExtensionsBoundaries(boundaries)\n  }\n}\n\n\n// process only on new candle\nif (bar.length === lastIndex) {\n  return\n}\n\n// get source data\nvar customSrc = source(quote=quote,type=type,exchange=exchange)\n\n// get ohlc, var makes it a ephemere, not stored throuhout multiple executions\nvar price = useHK ? avg_heikinashi(customSrc) : avg_ohlc_with_gaps(customSrc)\n\n// register as internal variable (without var) makes it persistent, and allow to use variable history ex priceRef[1]\npriceRef = price\n\n// grid size\nif (fixedScale) {\n  // absolute\n  steps = fixedScale\n} else {\n  // calculate avg of largest price range of candles\n  var priceRange = price.high - price.low\n\n  var atr = rma(priceRange, autoScaleLength);\n\n  if (bar.length < autoScaleLength) {\n    // not enough candles to determine avg price range of candle\n    return\n  }\n  \n  if (!steps || (autoRescale && bar.length > stepsIndex + autoRescale)) {\n    // calculate current grid cell size\n    steps = atr * autoScale\n\n    if (stepsIndex && autoRescale) {\n      var newLiquidityAtPrices = {};\n      var newIndexOfPrices = {};\n      var newResistances = [];\n      var newSupports = [];\n      pendingRedraws = []\n\n      // transport current grid data to the new cell size\n      Object.keys(liquidityAtPrices).forEach(price => {\n        var newPrice = Math.round(price / steps) * steps;\n        var oldCell = liquidityAtPrices[price];\n    \n        if (!newLiquidityAtPrices[newPrice]) {\n          newLiquidityAtPrices[newPrice] = { count: 0, strength: 0, top: newPrice + steps / 2, bottom: newPrice - steps / 2 };\n          newIndexOfPrices[newPrice] = [];\n        }\n    \n        // Aggregate strengths and index of prices\n        newLiquidityAtPrices[newPrice].strength += oldCell.strength;\n        newLiquidityAtPrices[newPrice].count += oldCell.count;\n        newIndexOfPrices[newPrice].push(indexOfPrices[price]);\n\n        if (oldCell.id) {\n          boundaries[oldCell.id] = bar.length;\n        }\n      });\n    \n      // Calculate new index of prices as the average of merged cells\n      Object.keys(newIndexOfPrices).forEach(price => {\n        const averageIndex = newIndexOfPrices[price].reduce((acc, cur, _, arr) => acc + cur / arr.length, 0);\n        newIndexOfPrices[price] = Math.round(averageIndex);\n        if (price > priceRef[1].close) {\n          newResistances.push(price);\n        } else {\n          newSupports.push(price);\n        }\n      \n        if (newLiquidityAtPrices[price].strength > threshold) {\n          pendingRedraws.push(price);\n        }\n      });\n    \n      // Update global variables\n      liquidityAtPrices = newLiquidityAtPrices;\n      indexOfPrices = newIndexOfPrices;\n      resistances = newResistances.sort((a, b) => a - b); // Ensure these are sorted\n      supports = newSupports.sort((a, b) => b - a)\n      pendingRedraws = pendingRedraws.sort((a, b) => (a - priceRef[1].close) - (b - priceRef[1].close))\n    }\n    \n    stepsIndex = bar.length\n  }\n}\n\nbuyVolume = source(vbuy, quote=quote,type=type,exchange=exchange)\nsellVolume = source(vsell, quote=quote,type=type,exchange=exchange)\nvol = buyVolume + sellVolume\n\n// since we only run this indi once per bar (for performance)\n// only analyze volume data of the previous bar (vol[1], buyVolume[1], sellVolume[1])\nconst avgBuyVolume = sma(buyVolume[1] || 0, volLength) || 0.0001;\nconst avgSellVolume = sma(sellVolume[1] || 0, volLength) || 0.0001;\n\nvar buyRatio = (buyVolume[1] || 0) / avgBuyVolume;\nvar sellRatio = (sellVolume[1] || 0) / avgSellVolume;\nif (useLog) {\n  buyRatio = Math.log(buyRatio + 1)\n  sellRatio = Math.log(sellRatio + 1)\n}\nvar dirtyResistances = false\nvar dirtySupports = false\n\nfor (let i = 0; i < resolvedLeverages.length; i++) {\n  var lev = (resolvedLeverages)[i]\n\n  var isResistance = lev > 0\n\n  var src = isResistance ? priceRef[1].high : priceRef[1].low\n\n  // liquidation price (from resolvedSrc + % to leverages[i]) \n  if (useLegacyLp) {\n    if (isResistance) {\n    var lp = src * (1 + (1 / Math.abs(lev)) + 0.005);\n    } else {\n    var lp = src * (1 - (1 / Math.abs(lev)) + 0.005);\n    }\n  } else {\n    var lp =(src + src * (100 / lev / 100))\n  }\n\n  // rounded lp median (the cell id)\n  var slp = (isResistance ? Math.floor(lp / steps) : Math.ceil(lp / steps)) * steps\n  \n  if (!liquidityAtPrices[slp]) {\n    // register cell\n    var top = slp + steps / 2\n    var bottom = slp - steps / 2\n    liquidityAtPrices[slp] = {\n      strength: 0,\n      index: bar.length,\n      top: top,\n      bottom: bottom,\n      count: 1\n    }\n    \n    if (isResistance) {\n      resistances.push(slp)\n      dirtyResistances = true\n    } else {\n      supports.push(slp)\n      dirtySupports = true\n    }\n  }\n  \n  // update cell\n  var currentIncrease = isResistance ? sellRatio : buyRatio\n  liquidityAtPrices[slp].strength += currentIncrease\n  liquidityAtPrices[slp].count += demultiplier\n  if (isResistance) {\n    totalResistances += currentIncrease\n  } else {\n    totalSupports += currentIncrease\n  }\n  \n  if (!indexOfPrices[slp]) {\n    indexOfPrices[slp] = bar.length\n  }\n\n  if (liquidityAtPrices[slp].strength > threshold) {\n    if (pendingRedraws.indexOf(slp) === -1) {\n      pendingRedraws.unshift(slp)\n    }\n  }\n}\ndirtyResistances && resistances.sort((a, b) => a - b)\ndirtySupports && supports.sort((a, b) => b - a)\n\nif (pendingRedraws.length) {\n\n  // round of used slot(s)\n  var slotsToRelease = []\n  for (var i = 0; i < pendingRedraws.length; i++) {\n    var cell = liquidityAtPrices[pendingRedraws[i]]\n\n    if (!cell) {\n      pendingRedraws.splice(i--, 1)\n      continue\n    }\n    \n    var slot = freeSlots.find(slot => slot.redrawAt < bar.length)\n\n    if (slot) {\n      var usedIndex = freeSlots.splice(freeSlots.indexOf(slot), 1)[0].index\n      usedSlots.push(usedIndex)\n\n      if (cell.id) {\n        boundaries[cell.id] = bar.length - 2\n      }\n      \n      cell.id = Math.random().toString()\n      cell.lastStrength = cell.strength\n      \n      var ratio = Math.max(0.01, Math.min(1, cell.strength * cell.count * (options.strength / 100)))\n      var color = interpolate(ratio, color0, color1, color2, color3)\n      \n      bar.series[series[usedIndex].id] ={\n        id: cell.id,\n        time: time - bar.timeframe,\n        lowerValue: cell.top,\n        higherValue: cell.bottom,\n        extendRight: true,\n        color: color\n      }\n\n      pendingRedraws.splice(i--, 1)\n      slotsToRelease.push(usedIndex)\n    } else {\n      break;\n    }\n  }\n  for (let i = 0; i < slotsToRelease.length; i++) {\n    var plotIndexToFree = usedSlots.splice(usedSlots.indexOf(slotsToRelease[i]), 1)[0]\n    \n    freeSlots.push({\n      index: plotIndexToFree,\n      redrawAt: bar.length +1\n      \n    })\n  }\n}\n\nfor (let i = 0; i < supports.length; i++) {\n  var slp = supports[i]\n\n  if (\n   price.low <= slp || liquidityAtPrices[slp].strength === 0\n  ) {\n    if (price.low <= slp) {\n      delete indexOfPrices[slp]\n    }\n\n    var pendingRedrawIndex = pendingRedraws.indexOf(slp)\n\n    if (pendingRedrawIndex !== -1) {\n      pendingRedraws.splice(pendingRedrawIndex, 1)\n    }\n\n    if (liquidityAtPrices[slp].id) {\n      boundaries[liquidityAtPrices[slp].id] = bar.length - 2\n    }\n\n    totalSupports -= liquidityAtPrices[slp].strength\n    delete liquidityAtPrices[slp]\n    supports.splice(i--, 1)\n  } else {\n    if (fadeAmount) {\n      if (bar.length > indexOfPrices[slp] + fadeStart) {\n        var currentFade = Math.min(fadeAmount, liquidityAtPrices[slp].strength)\n        liquidityAtPrices[slp].strength -= currentFade\n        totalSupports -= currentFade\n        var pendingRedrawIndex = pendingRedraws.indexOf(slp)\n        if (liquidityAtPrices[slp].strength > threshold) {\n          if (pendingRedrawIndex === -1) {\n            pendingRedraws.push(slp)\n          }\n        } else if (liquidityAtPrices[slp].id) {\n          boundaries[liquidityAtPrices[slp].id] = bar.length - 2\n          delete liquidityAtPrices[slp].id\n          if (pendingRedrawIndex !== -1) {\n            pendingRedraws.splice(pendingRedrawIndex, 1)\n          }\n        }\n      }\n    } else {\n      break;\n    }\n  }\n}\n\nfor (let i = 0; i < resistances.length; i++) {\n  var slp = resistances[i]\n\n  if (\n   price.high >= slp || liquidityAtPrices[slp].strength === 0\n  ) {\n    if (price.high >= slp) {\n      delete indexOfPrices[slp]\n    }\n\n    var pendingRedrawIndex = pendingRedraws.indexOf(slp)\n\n    if (pendingRedrawIndex !== -1) {\n      pendingRedraws.splice(pendingRedrawIndex, 1)\n    }\n\n    if (liquidityAtPrices[slp].id) {\n      boundaries[liquidityAtPrices[slp].id] = bar.length - 1\n    }\n\n    totalResistances -= liquidityAtPrices[slp].strength\n    delete liquidityAtPrices[slp]\n    resistances.splice(i--, 1)\n  } else {\n    if (fadeAmount) {\n      if (bar.length > indexOfPrices[slp] + fadeStart) {\n        var currentFade = Math.min(fadeAmount, liquidityAtPrices[slp].strength)\n        liquidityAtPrices[slp].strength -= currentFade\n        totalResistances -= currentFade\n        var pendingRedrawIndex = pendingRedraws.indexOf(slp)\n        if (liquidityAtPrices[slp].strength > threshold) {\n          if (pendingRedrawIndex === -1) {\n            pendingRedraws.push(slp)\n          }\n        } else if (liquidityAtPrices[slp].id) {\n          boundaries[liquidityAtPrices[slp].id] = bar.length - 2\n          delete liquidityAtPrices[slp].id\n          if (pendingRedrawIndex !== -1) {\n            pendingRedraws.splice(pendingRedrawIndex, 1)\n          }\n        }\n      }\n    } else {\n      break;\n    }\n  }\n}\n\n// set reference to bar index : avoid process next tick\nlastIndex = bar.length\n\n// define slots, 20 is reasonable amount\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\nbrokenarea(infinite=drawInfinite)\n\nif (showChanges) {\n  res = totalResistances\n  sup = totalSupports\n  var resChg = totalResistances - totalResistances[1]\n  var supChg = totalSupports - totalSupports[1]\n  histogram(\n    {\n      time: time,\n      value: resChg,\n      color: resChg > 0 ? 'green' : 'red'\n    },\n    priceScaleId=overlay1,\n    scaleMargins={top: 0.01, bottom: 0.95},\n    lastValueVisible=true,\n    title=\"R\"\n  )\n  histogram(\n    {\n      time: time,\n      value: supChg,\n      color: supChg > 0 ? 'green' : 'red'\n    },\n    priceScaleId=overlay2,\n    scaleMargins={top: 0.06, bottom: 0.9},\n    lastValueVisible=true,\n    title=\"S\"\n  )\n}",
          "createdAt": 1704326463912,
          "updatedAt": 1733129344348,
          "options": {
            "priceScaleId": "right",
            "scaleMargins": {
              "top": 0.03,
              "bottom": 0.27
            }
          },
          "optionsDefinitions": {
            "leverages": {
              "default": "5|20|100",
              "type": "text"
            },
            "threshold": {
              "default": 5,
              "type": "range",
              "min": 0,
              "max": 200,
              "log": true
            },
            "fadeAmount": {
              "default": 0.02,
              "type": "range",
              "min": 0,
              "max": 2,
              "step": 0.01
            },
            "fadeStart": {
              "default": 100,
              "type": "range",
              "min": 0,
              "max": 200,
              "step": 1
            },
            "autoScale": {
              "default": 0.39,
              "type": "range",
              "min": 0,
              "max": 2,
              "step": 0.01
            },
            "autoScaleLength": {
              "default": 200,
              "type": "range",
              "min": 1,
              "max": 200,
              "step": 1
            },
            "autoRescale": {
              "default": 0,
              "type": "range",
              "min": 0,
              "max": 1000,
              "log": true
            },
            "fixedScale": {
              "default": "",
              "type": "text",
              "placeholder": "empty = ATR"
            },
            "strength": {
              "default": 0.25,
              "type": "range",
              "min": 0,
              "max": 10,
              "step": 0.001,
              "log": true
            },
            "demultiplier": {
              "default": 1,
              "type": "range",
              "min": 0,
              "max": 10,
              "step": 0.001,
              "log": true
            },
            "quote": {
              "default": 0,
              "type": "list",
              "options": [
                null,
                "USD",
                "USDT",
                "TUSD",
                "USDC"
              ],
              "rebuild": true
            },
            "exchange": {
              "default": 0,
              "type": "exchange",
              "rebuild": true
            },
            "type": {
              "default": "perp",
              "type": "list",
              "options": [
                null,
                "spot",
                "perp"
              ],
              "rebuild": true
            },
            "color0": {
              "default": "rgba(42,0,117,0)",
              "type": "color"
            },
            "color1": {
              "default": "rgb(63,16,87)",
              "type": "color"
            },
            "color2": {
              "default": "rgb(76,152,134)",
              "type": "color"
            },
            "color3": {
              "default": "rgb(240,218,24)",
              "type": "color"
            },
            "volLength": {
              "default": 1,
              "type": "range",
              "min": 1,
              "max": 200,
              "step": 1
            },
            "useHK": {
              "default": 0,
              "type": "checkbox",
              "description": "Use heikinashi as source"
            },
            "useLog": {
              "default": 0,
              "type": "checkbox"
            },
            "showChanges": {
              "type": "checkbox",
              "default": 0
            },
            "drawInfinite": {
              "default": true,
              "type": "checkbox",
              "description": "Draw beyond viewport"
            },
            "useLegacyLp": {
              "default": true,
              "type": "checkbox"
            }
          },
          "series": [
            "liquidation-heatmap",
            "115l3kpn",
            "5bol7a21",
            "1sz6wp9l",
            "3pewy18c",
            "b1f7gj4j",
            "ozz6kjpx",
            "x264i7c3",
            "llfu2dil",
            "nf3dzegl",
            "lqpiabw6",
            "hn9uzfbi",
            "3vf265a7",
            "fy20yeod",
            "em7ra7an",
            "or27g5zr",
            "7ignhz86",
            "z68p9zbd",
            "2fanvpf9",
            "8946sepl",
            "tptizr4a",
            "gcnwlyia"
          ],
          "displayName": "Liquidation Heatmap"
        }
      },
      "indicatorOrder": [
        "cvd",
        "liquidations",
        "price",
        "volume",
        "_uic878tuv4zadepb"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0.03,
            "bottom": 0.27
          },
          "priceFormat": {
            "precision": 2,
            "minMove": 0.01
          },
          "indicators": [
            "Price",
            "Liquidation Heatmap"
          ]
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.84,
            "bottom": 0
          },
          "indicators": [
            "CVD"
          ]
        },
        "volume_liquidations": {
          "scaleMargins": {
            "top": 0.74,
            "bottom": 0.18
          },
          "indicators": [
            "Liquidations"
          ]
        },
        "volume": {
          "scaleMargins": {
            "top": 0.84,
            "bottom": 0
          },
          "indicators": [
            "Volume"
          ]
        },
        "overlay1": {
          "scaleMargins": {
            "top": 0.01,
            "bottom": 0.95
          }
        },
        "overlay2": {
          "scaleMargins": {
            "top": 0.06,
            "bottom": 0.9
          }
        }
      },
      "layouting": false,
      "showIndicators": false,
      "timeframe": "3",
      "refreshRate": 1000,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": true,
      "fillGapsWithEmpty": true,
      "showHorizontalGridlines": true,
      "horizontalGridlinesColor": "rgba(152,201,249,0.1)",
      "showVerticalGridlines": true,
      "verticalGridlinesColor": "rgba(166,227,255,0.08)",
      "showWatermark": false,
      "watermarkColor": "rgba(224,253,134,0.02)",
      "showBorder": true,
      "borderColor": "rgb(255,0,166)",
      "textColor": "rgb(236,223,123)",
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {},
      "barSpacing": 1.130462378944267,
      "_id": "chart",
      "navigationState": {
        "tab": "options",
        "optionsQuery": "",
        "fontSizePx": 14
      }
    },
    "settings": {
      "_id": "settings",
      "preferQuoteCurrencySize": true,
      "aggregationLength": 1,
      "calculateSlippage": null,
      "wsProxyUrl": null,
      "disableAnimations": false,
      "autoHideHeaders": true,
      "autoHideNames": true,
      "theme": "dark",
      "backgroundColor": "rgb(17,16,22)",
      "textColor": "rgb(95,220,254)",
      "buyColor": "rgb(3,119,7)",
      "sellColor": "rgb(116,1,1)",
      "timezoneOffset": -28800000,
      "useAudio": false,
      "audioVolume": 1,
      "audioFilters": {
        "PingPongDelay": true,
        "Compressor": false,
        "Delay": false,
        "HighPassFilter": true,
        "LowPassFilter": false
      },
      "sections": [
        "settings-workspaces",
        "settings-trades",
        "timeframe-minutes",
        "timeframe-seconds",
        "settings-colors",
        "indicator-left-colors",
        "indicator-left-other",
        "trades-display",
        "trades-audio",
        "trades-thresholds",
        "settings-other",
        "settings-exchanges",
        "indicator-right-scale",
        "indicator-right-default",
        "indicator-right-format",
        "indicator-right-colors",
        "trades-liquidations",
        "trades-preferences",
        "trades-columns"
      ],
      "searchTypes": {
        "recentSearches": true,
        "historical": true,
        "spots": true,
        "perpetuals": true,
        "futures": false,
        "normalize": true,
        "mergeUsdt": true
      },
      "searchQuotes": {},
      "previousSearchSelections": [
        {
          "label": "BTCUSD",
          "markets": [
            "BINANCE_FUTURES:btcbusd",
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcbusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITMEX:XBT_USDT",
            "BITMEX:XBTUSD",
            "BITMEX:XBTUSDT",
            "BITSTAMP:btcusd",
            "BITSTAMP:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "DERIBIT:BTC_USDC-PERPETUAL",
            "DERIBIT:BTC-PERPETUAL",
            "KRAKEN:PI_XBTUSD",
            "KRAKEN:XBT/USD",
            "KRAKEN:XBT/USDC",
            "KRAKEN:XBT/USDT",
            "KUCOIN:BTC-USDC",
            "KUCOIN:BTC-USDT",
            "KUCOIN:XBTUSDM",
            "KUCOIN:XBTUSDTM",
            "MEXC:BTC_USD",
            "MEXC:BTC_USDT",
            "MEXC:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP"
          ],
          "count": 40
        },
        {
          "label": "SOLUSD+BTCUSD",
          "markets": [
            "BINANCE_FUTURES:solusd_perp",
            "BINANCE_FUTURES:solusdt",
            "BINANCE:solusdt",
            "BITFINEX:SOLF0:USTF0",
            "BITFINEX:SOLUSD",
            "BITFINEX:SOLUST",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITMEX:SOLUSD",
            "BITMEX:SOLUSDT",
            "BYBIT:SOLUSDT",
            "COINBASE:SOL-USD",
            "COINBASE:SOL-USDT",
            "DERIBIT:SOL_USDC-PERPETUAL",
            "KRAKEN:SOL/USD",
            "OKEX:SOL-USDT",
            "OKEX:SOL-USDT-SWAP"
          ],
          "count": 17
        }
      ],
      "searchExchanges": {
        "UNISWAP": false
      },
      "timeframes": [
        {
          "label": "1s",
          "value": "1"
        },
        {
          "label": "3s",
          "value": "3"
        },
        {
          "label": "5s",
          "value": "5"
        },
        {
          "label": "10s",
          "value": "10"
        },
        {
          "label": "15s",
          "value": "15"
        },
        {
          "label": "30s",
          "value": "30"
        },
        {
          "label": "1m",
          "value": "60"
        },
        {
          "label": "3m",
          "value": "180"
        },
        {
          "label": "5m",
          "value": "300"
        },
        {
          "label": "15m",
          "value": "900"
        },
        {
          "label": "21m",
          "value": "1260"
        },
        {
          "label": "30m",
          "value": "1800"
        },
        {
          "label": "1h",
          "value": "3600"
        },
        {
          "label": "2h",
          "value": "7200"
        },
        {
          "label": "4h",
          "value": "14400"
        },
        {
          "label": "6h",
          "value": "21600"
        },
        {
          "label": "8h",
          "value": "28800"
        },
        {
          "label": "12h",
          "value": "43200"
        },
        {
          "label": "1d",
          "value": "86400"
        },
        {
          "label": "21 ticks",
          "value": "21t"
        },
        {
          "label": "50 ticks",
          "value": "50t"
        },
        {
          "label": "89 ticks",
          "value": "89t"
        },
        {
          "label": "100 ticks",
          "value": "100t"
        },
        {
          "label": "200 ticks",
          "value": "200t"
        },
        {
          "label": "610 ticks",
          "value": "610t"
        },
        {
          "label": "1000 ticks",
          "value": "1000t"
        },
        {
          "label": "1597 ticks",
          "value": "1597t"
        }
      ],
      "favoriteTimeframes": {},
      "normalizeWatermarks": true,
      "alerts": false,
      "alertsColor": "rgb(255,0,0)",
      "alertsLineStyle": 2,
      "alertsLineWidth": 2,
      "alertsClick": false,
      "alertSound": null,
      "showThresholdsAsTable": true,
      "indicatorDialogNavigation": "{\"optionsQuery\":\"\",\"editorOptions\":{},\"columnWidth\":240,\"tab\":\"options\"}"
    },
    "stats": {
      "granularity": 5000,
      "window": 60000,
      "enableChart": false,
      "buckets": {
        "trades": {
          "id": "trades",
          "name": "TRADES",
          "input": "cbuy + csell",
          "enabled": true,
          "color": "rgba(255, 255, 255, .25)",
          "precision": 2,
          "type": "line"
        },
        "vold": {
          "id": "vold",
          "name": "VOLUME Δ",
          "input": "vbuy - vsell",
          "enabled": false,
          "color": "#40d745",
          "type": "area"
        },
        "tradesd": {
          "id": "tradesd",
          "name": "TRADES Δ",
          "input": "cbuy - csell",
          "enabled": true,
          "color": "#2196f3",
          "precision": 2,
          "type": "line"
        },
        "1hliq": {
          "id": "1hliq",
          "name": "1H LIQUIDATIONS Δ",
          "window": 3600000,
          "input": "lbuy-lsell",
          "enabled": false,
          "color": "value>0?'#43a047':'#f44336'",
          "conditionnalColor": true,
          "type": "histogram"
        }
      },
      "_id": "stats"
    },
    "counters": {
      "granularity": 5000,
      "liquidationsOnly": false,
      "steps": [
        30000,
        60000,
        300000,
        900000,
        1800000
      ],
      "count": false,
      "_id": "counters"
    },
    "stats copy 1": {
      "granularity": 5000,
      "window": 60000,
      "enableChart": false,
      "buckets": {
        "trades": {
          "id": "trades",
          "name": "TRADES",
          "input": "cbuy + csell",
          "enabled": false,
          "color": "rgba(255, 255, 255, .25)",
          "precision": 2,
          "type": "line"
        },
        "vold": {
          "id": "vold",
          "name": "VOLUME Δ",
          "input": "vbuy - vsell",
          "enabled": true,
          "color": "#40d745",
          "type": "area",
          "conditionnalColor": false
        },
        "tradesd": {
          "id": "tradesd",
          "name": "TRADES Δ",
          "input": "cbuy - csell",
          "enabled": false,
          "color": "#2196f3",
          "precision": 2,
          "type": "line"
        },
        "1hliq": {
          "id": "1hliq",
          "name": "1H LIQUIDATIONS Δ",
          "window": 3600000,
          "input": "lbuy-lsell",
          "enabled": false,
          "color": "value>0?'#43a047':'#f44336'",
          "conditionnalColor": true,
          "type": "histogram"
        }
      },
      "_id": "stats copy 1"
    },
    "exchanges": {
      "AGGR": {
        "disabled": true
      },
      "BINANCE": {
        "disabled": false
      },
      "BINANCE_FUTURES": {
        "disabled": false
      },
      "BINANCE_US": {
        "disabled": true
      },
      "BITFINEX": {
        "disabled": false
      },
      "BITGET": {
        "disabled": true
      },
      "BITMART": {
        "disabled": true
      },
      "BITMEX": {
        "disabled": false
      },
      "BITSTAMP": {
        "disabled": false
      },
      "BYBIT": {
        "disabled": false
      },
      "COINBASE": {
        "disabled": false
      },
      "CRYPTOCOM": {
        "disabled": true
      },
      "DERIBIT": {
        "disabled": false
      },
      "DYDX": {
        "disabled": false
      },
      "GATEIO": {
        "disabled": false
      },
      "HITBTC": {
        "disabled": true
      },
      "HUOBI": {
        "disabled": false
      },
      "KRAKEN": {
        "disabled": false
      },
      "KUCOIN": {
        "disabled": false
      },
      "MEXC": {
        "disabled": false
      },
      "OKEX": {
        "disabled": false
      },
      "PHEMEX": {
        "disabled": false
      },
      "POLONIEX": {
        "disabled": true
      },
      "UNISWAP": {
        "disabled": false
      },
      "_id": "exchanges"
    },
    "trades-lite": {
      "liquidations": [
        {
          "id": "liquidation_threshold",
          "amount": 50000,
          "buyColor": "rgba(236,64,122,0.5)",
          "sellColor": "rgba(255,152,0,0.5)",
          "buyAudio": "var srqtR = Math.min(1, gain / 4)\nplay(329.63, srqtR, srqtR*2,0,,,'sine')\nplay(329.63, srqtR, srqtR*4,0.08,,,'sine')",
          "sellAudio": "var srqtR = Math.min(1, gain / 6)\nplay(440, srqtR, srqtR*2,0,,,'sine')\nplay(440, srqtR, srqtR*4,0.08,,,'sine')"
        },
        {
          "id": "liquidation_significant",
          "amount": 100000,
          "buyColor": "rgba(236,64,122,0.6)",
          "sellColor": "rgba(255,152,0,0.7)",
          "buyAudio": "var srqtR = Math.min(1, gain / 4)\nplay(329.63, srqtR, srqtR*4,0,,,'sine')\nplay(329.63, srqtR, srqtR*6,0.08,,,'sine')",
          "sellAudio": "var srqtR = Math.min(1, gain / 6)\nplay(440, srqtR, srqtR*4,0,,,'sine')\nplay(440, srqtR, srqtR*6,0.08,,,'sine')"
        },
        {
          "id": "liquidation_huge",
          "amount": 200000,
          "buyGif": "flying money",
          "sellGif": "flying money",
          "buyColor": "rgba(236,64,122,0.7)",
          "sellColor": "rgba(255,152,0,0.8)",
          "buyAudio": "var srqtR = Math.min(1, gain / 4)\nplay(329.63, srqtR, srqtR*4,0,,,'sine')\nplay(329.63, srqtR, srqtR*8,0.08,,,'sine')",
          "sellAudio": "var srqtR = Math.min(1, gain / 6)\nplay(440, srqtR, srqtR*4,0,,,'sine')\nplay(440, srqtR, srqtR*8,0.08,,,'sine')"
        },
        {
          "id": "liquidation_rare",
          "amount": 1000000,
          "buyGif": "explosion",
          "sellGif": "explosion",
          "buyColor": "rgb(156,39,176)",
          "sellColor": "rgb(255,235,59)",
          "buyAudio": "var srqtR = Math.min(1, gain / 10)\nplay(329.63, srqtR, 1,0,,,'sine')\nplay(329.63, srqtR, srqtR*10,0.08,,,'sine')",
          "sellAudio": "var srqtR = Math.min(1, gain / 10)\nplay(440, srqtR, 1,0,,,'sine')\nplay(440, srqtR, srqtR*10,0.08,,,'sine')"
        }
      ],
      "thresholds": [
        {
          "id": "threshold",
          "amount": 25000,
          "buyColor": "rgb(104,218,109)",
          "sellColor": "rgb(248,2,2)",
          "buyAudio": "play(659.26, gain / 10, 0.1 + gain / 7)",
          "sellAudio": "play(493.88, gain * 1.5 / 10, 0.1 + gain / 7)"
        },
        {
          "id": "significant",
          "amount": 100000,
          "buyColor": "rgba(6,152,13,0.8)",
          "sellColor": "rgba(177,0,0,0.8)",
          "buyAudio": "play(659.26, 0.05 + gain / 10, 0.2 + ratio * 0.23,0,,0); play(830.6, 0.05 + gain / 10, 0.2 + ratio * 0.23, 0.08,,0)",
          "sellAudio": "play(493.88, 0.05 + gain * 1.5 / 10, 0.2 + ratio * 0.23,0,,0); play(392, 0.05 + gain * 1.5 / 10, 0.2 + ratio * 0.23, 0.08,,0)"
        },
        {
          "id": "huge",
          "amount": 500000,
          "buyGif": "cash bullish",
          "sellGif": "cash bearish",
          "buyColor": "rgb(2,108,7)",
          "sellColor": "rgb(101,0,0)",
          "buyAudio": "play(659.26, 0.05 + gain / 25, 0.1 + ratio * 0.23, 0,,0); play(830.6, 0.05 + gain / 25, 0.1 + ratio * 0.23, 0.08,,0); play(987.76, 0.05 + gain / 25, 0.1 + ratio * 0.23, 0.16,,0); play(1318.52, 0.05 + gain / 10, 0.1 + ratio * 0.23, 0.24,,0)",
          "sellAudio": "play(493.88, 0.05 + gain / 25, 0.1 + ratio * 0.23, 0,,0); play(369.99, 0.05 + gain * 1.5 / 10, 0.2, 0.08,,0); play(293.66, 0.05 + gain * 1.5 / 10, 0.2, 0.16,,0); play(246.94, 0.05 + gain * 1.5 / 10, 0.1 + ratio * 0.23, 0.24,,0)"
        },
        {
          "id": "rare",
          "amount": 10000000,
          "buyGif": "explosion",
          "sellGif": "explosion",
          "buyColor": "rgb(0,39,1)",
          "sellColor": "rgb(52,1,1)",
          "buyAudio": "play(659.26, 0.05 + gain / 25, 0.1 + ratio * 0.13, 0,,0); play(830.6, 0.05 + gain / 25, 0.1 + ratio * 0.13, 0.08,,0); play(987.76, 0.05 + gain / 25, 0.1 + ratio * 0.13, 0.16,,0); play(1318.52, 0.05 + gain / 10, 0.1 + ratio * 0.13, 0.24,,0)",
          "sellAudio": "play(493.88, 0.05 + gain / 25, 0.1 + ratio * 0.13, 0,,0); play(369.99, 0.05 + gain * 1.5 / 10, 0.2, 0.08,,0); play(293.66, 0.05 + gain * 1.5 / 10, 0.2, 0.16,,0); play(246.94, 0.05 + gain * 1.5 / 10, 0.1 + ratio * 0.13, 0.24,,0)"
        }
      ],
      "audioThreshold": null,
      "multipliers": {},
      "maxRows": "1000",
      "muted": false,
      "audioPitch": null,
      "audioVolume": null,
      "showPairs": false,
      "showTrades": true,
      "showLiquidations": true,
      "showLogos": true,
      "monochromeLogos": false,
      "showTimeAgo": true,
      "showPrices": true,
      "showHistograms": false,
      "thresholdsMultipler": 1,
      "_id": "trades-lite"
    },
    "trades": {
      "liquidations": [
        {
          "id": "liquidation_significant",
          "amount": 10000,
          "buyColor": "rgb(2,147,9)",
          "sellColor": "rgb(162,1,1)",
          "buyAudio": "var srqtR = Math.min(1, gain / 4)\nplay(329.63, srqtR, srqtR*4,0,,,'sine')\nplay(329.63, srqtR, srqtR*6,0.08,,,'sine')",
          "sellAudio": "var srqtR = Math.min(1, gain / 6)\nplay(440, srqtR, srqtR*4,0,,,'sine')\nplay(440, srqtR, srqtR*6,0.08,,,'sine')"
        },
        {
          "id": "liquidation_huge",
          "amount": 50000,
          "buyGif": "jubilation",
          "sellGif": "agony",
          "buyColor": "rgb(0,109,5)",
          "sellColor": "rgb(129,0,0)",
          "buyAudio": "var srqtR = Math.min(1, gain / 4)\nplay(329.63, srqtR, srqtR*4,0,,,'sine')\nplay(329.63, srqtR, srqtR*8,0.08,,,'sine')",
          "sellAudio": "var srqtR = Math.min(1, gain / 6)\nplay(440, srqtR, srqtR*4,0,,,'sine')\nplay(440, srqtR, srqtR*8,0.08,,,'sine')"
        },
        {
          "id": "liquidation_rare",
          "amount": 125000,
          "buyGif": "brickwall",
          "sellGif": "bullfight",
          "buyColor": "rgb(1,60,1)",
          "sellColor": "rgb(96,2,2)",
          "buyAudio": "var srqtR = Math.min(1, gain / 10)\nplay(329.63, srqtR, 1,0,,,'sine')\nplay(329.63, srqtR, srqtR*10,0.08,,,'sine')",
          "sellAudio": "var srqtR = Math.min(1, gain / 10)\nplay(440, srqtR, 1,0,,,'sine')\nplay(440, srqtR, srqtR*10,0.08,,,'sine')"
        }
      ],
      "thresholds": [
        {
          "id": "threshold",
          "amount": 16000.000000000007,
          "buyColor": "rgba(119, 148, 92, 0.25)",
          "sellColor": "rgba(239, 67, 82, 0.25)",
          "buyAudio": "play(659.26, gain / 10, 0.1 + gain / 7)",
          "sellAudio": "play(493.88, gain * 1.5 / 10, 0.1 + gain / 7)"
        },
        {
          "id": "significant",
          "amount": 40000.00000000002,
          "buyColor": "rgb(100, 157, 102)",
          "sellColor": "rgb(239, 67, 82)",
          "buyAudio": "play(659.26, 0.05 + gain / 10, 0.2 + ratio * 0.23,0,,0); play(830.6, 0.05 + gain / 10, 0.2 + ratio * 0.23, 0.08,,0)",
          "sellAudio": "play(493.88, 0.05 + gain * 1.5 / 10, 0.2 + ratio * 0.23,0,,0); play(392, 0.05 + gain * 1.5 / 10, 0.2 + ratio * 0.23, 0.08,,0)"
        },
        {
          "id": "huge",
          "amount": 160000.0000000001,
          "buyGif": "cash bullish",
          "sellGif": "cash bearish",
          "buyColor": "rgb(59, 202, 109)",
          "sellColor": "rgb(235, 30, 47)",
          "buyAudio": "play(659.26, 0.05 + gain / 25, 0.1 + ratio * 0.23, 0,,0); play(830.6, 0.05 + gain / 25, 0.1 + ratio * 0.23, 0.08,,0); play(987.76, 0.05 + gain / 25, 0.1 + ratio * 0.23, 0.16,,0); play(1318.52, 0.05 + gain / 10, 0.1 + ratio * 0.23, 0.24,,0)",
          "sellAudio": "play(493.88, 0.05 + gain / 25, 0.1 + ratio * 0.23, 0,,0); play(369.99, 0.05 + gain * 1.5 / 10, 0.2, 0.08,,0); play(293.66, 0.05 + gain * 1.5 / 10, 0.2, 0.16,,0); play(246.94, 0.05 + gain * 1.5 / 10, 0.1 + ratio * 0.23, 0.24,,0)"
        },
        {
          "id": "rare",
          "amount": 1600000.0000000007,
          "buyGif": "explosion",
          "sellGif": "explosion",
          "buyColor": "rgb(0, 255, 127)",
          "sellColor": "rgb(217, 31, 28)",
          "buyAudio": "play(659.26, 0.05 + gain / 25, 0.1 + ratio * 0.13, 0,,0); play(830.6, 0.05 + gain / 25, 0.1 + ratio * 0.13, 0.08,,0); play(987.76, 0.05 + gain / 25, 0.1 + ratio * 0.13, 0.16,,0); play(1318.52, 0.05 + gain / 10, 0.1 + ratio * 0.13, 0.24,,0)",
          "sellAudio": "play(493.88, 0.05 + gain / 25, 0.1 + ratio * 0.13, 0,,0); play(369.99, 0.05 + gain * 1.5 / 10, 0.2, 0.08,,0); play(293.66, 0.05 + gain * 1.5 / 10, 0.2, 0.16,,0); play(246.94, 0.05 + gain * 1.5 / 10, 0.1 + ratio * 0.13, 0.24,,0)"
        }
      ],
      "audioThreshold": null,
      "multipliers": {},
      "maxRows": 100,
      "muted": false,
      "audioPitch": null,
      "audioVolume": null,
      "showPairs": false,
      "showTrades": false,
      "showLiquidations": true,
      "showLogos": true,
      "monochromeLogos": false,
      "showTimeAgo": false,
      "showPrices": true,
      "showHistograms": true,
      "thresholdsMultipler": 0.16,
      "showAvgPrice": true,
      "_id": "trades"
    },
    "quikstats": {
      "granularity": 5000,
      "window": 60000,
      "enableChart": false,
      "buckets": {
        "trades": {
          "id": "trades",
          "name": "TRADES",
          "input": "cbuy + csell",
          "enabled": false,
          "color": "rgba(255, 255, 255, .25)",
          "precision": 2,
          "type": "line",
          "conditionnalColor": false
        },
        "vold": {
          "id": "vold",
          "name": "VOLUME Δ",
          "input": "vbuy - vsell",
          "enabled": false,
          "color": "#40d745",
          "type": "area"
        },
        "tradesd": {
          "id": "tradesd",
          "name": "TRADES Δ",
          "input": "cbuy - csell",
          "enabled": false,
          "color": "#2196f3",
          "precision": 2,
          "type": "line"
        },
        "1hliq": {
          "id": "1hliq",
          "name": "1H LIQUIDATIONS Δ",
          "window": 3600000,
          "input": "lbuy-lsell",
          "enabled": true,
          "color": "value>0?'#43a047':'#f44336'",
          "conditionnalColor": true,
          "type": "histogram"
        }
      },
      "_id": "quikstats"
    },
    "website": {
      "url": "https://diesel.baby/crawler.html",
      "reloadTimer": 0,
      "interactive": true,
      "invert": false,
      "locked": false,
      "_id": "website"
    }
  }
}
